// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CancelSale extends ethereum.Event {
  get params(): CancelSale__Params {
    return new CancelSale__Params(this);
  }
}

export class CancelSale__Params {
  _event: CancelSale;

  constructor(event: CancelSale) {
    this._event = event;
  }

  get listingId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get listingIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get cancelledDate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NewListing extends ethereum.Event {
  get params(): NewListing__Params {
    return new NewListing__Params(this);
  }
}

export class NewListing__Params {
  _event: NewListing;

  constructor(event: NewListing) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get listingId(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get listingIndex(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get acceptedPayment(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get listedDate(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Sale extends ethereum.Event {
  get params(): Sale__Params {
    return new Sale__Params(this);
  }
}

export class Sale__Params {
  _event: Sale;

  constructor(event: Sale) {
    this._event = event;
  }

  get listingId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get listingIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get saleDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SaleWithToken extends ethereum.Event {
  get params(): SaleWithToken__Params {
    return new SaleWithToken__Params(this);
  }
}

export class SaleWithToken__Params {
  _event: SaleWithToken;

  constructor(event: SaleWithToken) {
    this._event = event;
  }

  get listingId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get listingIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get saleDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Marketplace__getListingResultValue0Struct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get contractAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get acceptedPayment(): Address {
    return this[5].toAddress();
  }
}

export class Marketplace__listResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getId(): Bytes {
    return this.value0;
  }

  getIndex(): BigInt {
    return this.value1;
  }
}

export class Marketplace extends ethereum.SmartContract {
  static bind(address: Address): Marketplace {
    return new Marketplace("Marketplace", address);
  }

  IID_IERC1155(): Bytes {
    let result = super.call("IID_IERC1155", "IID_IERC1155():(bytes4)", []);

    return result[0].toBytes();
  }

  try_IID_IERC1155(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("IID_IERC1155", "IID_IERC1155():(bytes4)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  IID_IERC2981(): Bytes {
    let result = super.call("IID_IERC2981", "IID_IERC2981():(bytes4)", []);

    return result[0].toBytes();
  }

  try_IID_IERC2981(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("IID_IERC2981", "IID_IERC2981():(bytes4)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  IID_IERC721(): Bytes {
    let result = super.call("IID_IERC721", "IID_IERC721():(bytes4)", []);

    return result[0].toBytes();
  }

  try_IID_IERC721(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("IID_IERC721", "IID_IERC721():(bytes4)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  accessControl(): Address {
    let result = super.call("accessControl", "accessControl():(address)", []);

    return result[0].toAddress();
  }

  try_accessControl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accessControl",
      "accessControl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListing(
    id: Bytes,
    listingIndex: BigInt
  ): Marketplace__getListingResultValue0Struct {
    let result = super.call(
      "getListing",
      "getListing(bytes32,uint256):((address,address,uint256,uint256,uint256,address))",
      [
        ethereum.Value.fromFixedBytes(id),
        ethereum.Value.fromUnsignedBigInt(listingIndex)
      ]
    );

    return changetype<Marketplace__getListingResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListing(
    id: Bytes,
    listingIndex: BigInt
  ): ethereum.CallResult<Marketplace__getListingResultValue0Struct> {
    let result = super.tryCall(
      "getListing",
      "getListing(bytes32,uint256):((address,address,uint256,uint256,uint256,address))",
      [
        ethereum.Value.fromFixedBytes(id),
        ethereum.Value.fromUnsignedBigInt(listingIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Marketplace__getListingResultValue0Struct>(value[0].toTuple())
    );
  }

  hasNFTApproval(_nftAddress: Address, _from: Address): boolean {
    let result = super.call(
      "hasNFTApproval",
      "hasNFTApproval(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromAddress(_from)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasNFTApproval(
    _nftAddress: Address,
    _from: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasNFTApproval",
      "hasNFTApproval(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromAddress(_from)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isExistId(id: Bytes): boolean {
    let result = super.call("isExistId", "isExistId(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(id)
    ]);

    return result[0].toBoolean();
  }

  try_isExistId(id: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isExistId", "isExistId(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isListingValid(id: Bytes, listingIndex: BigInt): boolean {
    let result = super.call(
      "isListingValid",
      "isListingValid(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(id),
        ethereum.Value.fromUnsignedBigInt(listingIndex)
      ]
    );

    return result[0].toBoolean();
  }

  try_isListingValid(
    id: Bytes,
    listingIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isListingValid",
      "isListingValid(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(id),
        ethereum.Value.fromUnsignedBigInt(listingIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRoyaltyStandard(_contract: Address): boolean {
    let result = super.call(
      "isRoyaltyStandard",
      "isRoyaltyStandard(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );

    return result[0].toBoolean();
  }

  try_isRoyaltyStandard(_contract: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRoyaltyStandard",
      "isRoyaltyStandard(address):(bool)",
      [ethereum.Value.fromAddress(_contract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  list(
    nftAddress: Address,
    tokenId: BigInt,
    price: BigInt,
    quantity: BigInt,
    acceptedPayment: Address
  ): Marketplace__listResult {
    let result = super.call(
      "list",
      "list(address,uint256,uint256,uint256,address):(bytes32,uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(quantity),
        ethereum.Value.fromAddress(acceptedPayment)
      ]
    );

    return new Marketplace__listResult(
      result[0].toBytes(),
      result[1].toBigInt()
    );
  }

  try_list(
    nftAddress: Address,
    tokenId: BigInt,
    price: BigInt,
    quantity: BigInt,
    acceptedPayment: Address
  ): ethereum.CallResult<Marketplace__listResult> {
    let result = super.tryCall(
      "list",
      "list(address,uint256,uint256,uint256,address):(bytes32,uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(quantity),
        ethereum.Value.fromAddress(acceptedPayment)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__listResult(value[0].toBytes(), value[1].toBigInt())
    );
  }

  maxPrice(): BigInt {
    let result = super.call("maxPrice", "maxPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxPrice", "maxPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minPrice(): BigInt {
    let result = super.call("minPrice", "minPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minPrice", "minPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  trustedForwarder(): Address {
    let result = super.call(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  wrapperRegistry(): Address {
    let result = super.call(
      "wrapperRegistry",
      "wrapperRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_wrapperRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wrapperRegistry",
      "wrapperRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get listingIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class BuyBatchCall extends ethereum.Call {
  get inputs(): BuyBatchCall__Inputs {
    return new BuyBatchCall__Inputs(this);
  }

  get outputs(): BuyBatchCall__Outputs {
    return new BuyBatchCall__Outputs(this);
  }
}

export class BuyBatchCall__Inputs {
  _call: BuyBatchCall;

  constructor(call: BuyBatchCall) {
    this._call = call;
  }

  get ids(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get listingIndexes(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get quantities(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BuyBatchCall__Outputs {
  _call: BuyBatchCall;

  constructor(call: BuyBatchCall) {
    this._call = call;
  }
}

export class BuyWithTokenCall extends ethereum.Call {
  get inputs(): BuyWithTokenCall__Inputs {
    return new BuyWithTokenCall__Inputs(this);
  }

  get outputs(): BuyWithTokenCall__Outputs {
    return new BuyWithTokenCall__Outputs(this);
  }
}

export class BuyWithTokenCall__Inputs {
  _call: BuyWithTokenCall;

  constructor(call: BuyWithTokenCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get listingIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyWithTokenCall__Outputs {
  _call: BuyWithTokenCall;

  constructor(call: BuyWithTokenCall) {
    this._call = call;
  }
}

export class CancelBatchCall extends ethereum.Call {
  get inputs(): CancelBatchCall__Inputs {
    return new CancelBatchCall__Inputs(this);
  }

  get outputs(): CancelBatchCall__Outputs {
    return new CancelBatchCall__Outputs(this);
  }
}

export class CancelBatchCall__Inputs {
  _call: CancelBatchCall;

  constructor(call: CancelBatchCall) {
    this._call = call;
  }

  get ids(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get listingIndexes(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class CancelBatchCall__Outputs {
  _call: CancelBatchCall;

  constructor(call: CancelBatchCall) {
    this._call = call;
  }
}

export class CancelListCall extends ethereum.Call {
  get inputs(): CancelListCall__Inputs {
    return new CancelListCall__Inputs(this);
  }

  get outputs(): CancelListCall__Outputs {
    return new CancelListCall__Outputs(this);
  }
}

export class CancelListCall__Inputs {
  _call: CancelListCall;

  constructor(call: CancelListCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get listingIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelListCall__Outputs {
  _call: CancelListCall;

  constructor(call: CancelListCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _registryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wrapperRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _accessControl(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _forwarder(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ListCall extends ethereum.Call {
  get inputs(): ListCall__Inputs {
    return new ListCall__Inputs(this);
  }

  get outputs(): ListCall__Outputs {
    return new ListCall__Outputs(this);
  }
}

export class ListCall__Inputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get acceptedPayment(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ListCall__Outputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get index(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RegisterRoyaltyCall extends ethereum.Call {
  get inputs(): RegisterRoyaltyCall__Inputs {
    return new RegisterRoyaltyCall__Inputs(this);
  }

  get outputs(): RegisterRoyaltyCall__Outputs {
    return new RegisterRoyaltyCall__Outputs(this);
  }
}

export class RegisterRoyaltyCall__Inputs {
  _call: RegisterRoyaltyCall;

  constructor(call: RegisterRoyaltyCall) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _royaltier(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _percent(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RegisterRoyaltyCall__Outputs {
  _call: RegisterRoyaltyCall;

  constructor(call: RegisterRoyaltyCall) {
    this._call = call;
  }
}

export class RemoveRoyaltyCall extends ethereum.Call {
  get inputs(): RemoveRoyaltyCall__Inputs {
    return new RemoveRoyaltyCall__Inputs(this);
  }

  get outputs(): RemoveRoyaltyCall__Outputs {
    return new RemoveRoyaltyCall__Outputs(this);
  }
}

export class RemoveRoyaltyCall__Inputs {
  _call: RemoveRoyaltyCall;

  constructor(call: RemoveRoyaltyCall) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRoyaltyCall__Outputs {
  _call: RemoveRoyaltyCall;

  constructor(call: RemoveRoyaltyCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetMaxCall extends ethereum.Call {
  get inputs(): SetMaxCall__Inputs {
    return new SetMaxCall__Inputs(this);
  }

  get outputs(): SetMaxCall__Outputs {
    return new SetMaxCall__Outputs(this);
  }
}

export class SetMaxCall__Inputs {
  _call: SetMaxCall;

  constructor(call: SetMaxCall) {
    this._call = call;
  }

  get t(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxCall__Outputs {
  _call: SetMaxCall;

  constructor(call: SetMaxCall) {
    this._call = call;
  }
}

export class SetMinCall extends ethereum.Call {
  get inputs(): SetMinCall__Inputs {
    return new SetMinCall__Inputs(this);
  }

  get outputs(): SetMinCall__Outputs {
    return new SetMinCall__Outputs(this);
  }
}

export class SetMinCall__Inputs {
  _call: SetMinCall;

  constructor(call: SetMinCall) {
    this._call = call;
  }

  get t(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinCall__Outputs {
  _call: SetMinCall;

  constructor(call: SetMinCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateTokenRegistryCall extends ethereum.Call {
  get inputs(): UpdateTokenRegistryCall__Inputs {
    return new UpdateTokenRegistryCall__Inputs(this);
  }

  get outputs(): UpdateTokenRegistryCall__Outputs {
    return new UpdateTokenRegistryCall__Outputs(this);
  }
}

export class UpdateTokenRegistryCall__Inputs {
  _call: UpdateTokenRegistryCall;

  constructor(call: UpdateTokenRegistryCall) {
    this._call = call;
  }

  get _newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTokenRegistryCall__Outputs {
  _call: UpdateTokenRegistryCall;

  constructor(call: UpdateTokenRegistryCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawERC20Call extends ethereum.Call {
  get inputs(): WithdrawERC20Call__Inputs {
    return new WithdrawERC20Call__Inputs(this);
  }

  get outputs(): WithdrawERC20Call__Outputs {
    return new WithdrawERC20Call__Outputs(this);
  }
}

export class WithdrawERC20Call__Inputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawERC20Call__Outputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }
}
